/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package tienda;

import java.awt.*;
import java.awt.print.*;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author Pablo
 */
public class Menu extends javax.swing.JFrame implements Printable {

    Conexion cc = new Conexion();
    Connection conectar = cc.conexion();
    
    DefaultTableModel valoresTabla;
    DefaultTableModel datos = new DefaultTableModel();
    DefaultTableModel datos2 = new DefaultTableModel();
    String name = "", date = "";

    /**
     * Creates new form Menu
     */
    public Menu() {
        initComponents();

        cbxProductos.setEnabled(false);
        txtID.setEnabled(false);
        txtPedido.setEnabled(false);
        txtCosto.setEnabled(false);
        txtCantidad.setEnabled(false);
        btnFinVenta.setEnabled(false);
        btnIngresar.setEnabled(false);
        btnSeleccionar.setEnabled(false);

        setLocationRelativeTo(null);
        listaDesayuno();
        listaComida();
        listaPostre();
        listaCafeC();
        listaCafeF();
        listaBebidas();
        String titulos[] = {"ID", "Producto", "Cantidad", "Costo"};
        datos.setColumnIdentifiers(titulos);
        tblPedido.setModel(datos);

        String titulos2[] = {"ID", "Producto","Costo","Cantidad","Costo Total"};
        datos2.setColumnIdentifiers(titulos2);
        tblPedido2.setModel(datos2);
    }

    void Menu(String nombre, String fecha) {
        name = nombre;
        date = fecha;
        lblVendedor.setText(name);
        lblFecha.setText(date);
    }

    public int costo(int precio, int cantidad) {
        int total = 0;

        total = (precio * cantidad);
        return total;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane5 = new javax.swing.JScrollPane();
        jTable5 = new javax.swing.JTable();
        pnlPedido = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        tblTabla4 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblTabla1 = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblTabla2 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblTabla6 = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblTabla3 = new javax.swing.JTable();
        PanelPedido = new javax.swing.JPanel();
        txtPedido = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        btnSeleccionar = new javax.swing.JButton();
        jScrollPane8 = new javax.swing.JScrollPane();
        tblPedido = new javax.swing.JTable();
        txtCantidad = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        cbxProductos = new javax.swing.JComboBox();
        btnIngresar = new javax.swing.JButton();
        txtID = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtCosto = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        btnFinVenta = new javax.swing.JButton();
        btnVentaNueva = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        tblTabla5 = new javax.swing.JTable();
        lb_img = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        Recibo = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane10 = new javax.swing.JScrollPane();
        tblPedido2 = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        lblVendedor = new javax.swing.JLabel();
        lblFecha = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        lblTotal = new javax.swing.JLabel();
        Logo2 = new javax.swing.JLabel();
        lblFolio = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        Fondo2 = new javax.swing.JLabel();
        Fondo1 = new javax.swing.JLabel();
        idBusqueda = new javax.swing.JLabel();
        txtImagen = new javax.swing.JTextField();
        btnImprimir = new javax.swing.JButton();
        btnRegresar = new javax.swing.JButton();

        jTable5.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2"
            }
        ));
        jScrollPane5.setViewportView(jTable5);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pnlPedido.setFont(new java.awt.Font("Arial", 3, 12)); // NOI18N

        jPanel1.setBackground(new java.awt.Color(204, 204, 255));

        tblTabla4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Reproductores e instrumentos", "Costo"
            }
        ));
        tblTabla4.setToolTipText("Seleccione alguna opcion dando click en la columna");
        tblTabla4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jScrollPane6.setViewportView(tblTabla4);
        tblTabla4.getColumnModel().getColumn(0).setMaxWidth(40);
        tblTabla4.getColumnModel().getColumn(2).setMaxWidth(50);

        tblTabla1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Celulares, camara y reloj", "Costo"
            }
        ));
        tblTabla1.setToolTipText("Seleccione alguna opcion dando click en la columna");
        tblTabla1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jScrollPane2.setViewportView(tblTabla1);
        tblTabla1.getColumnModel().getColumn(0).setMaxWidth(40);
        tblTabla1.getColumnModel().getColumn(2).setMaxWidth(50);

        tblTabla2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Computadoras", "Costo"
            }
        ));
        tblTabla2.setToolTipText("Seleccione alguna opcion dando click en la columna");
        tblTabla2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jScrollPane1.setViewportView(tblTabla2);
        tblTabla2.getColumnModel().getColumn(0).setMaxWidth(40);
        tblTabla2.getColumnModel().getColumn(2).setMaxWidth(50);

        tblTabla6.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Videojuegos", "Costo"
            }
        ));
        tblTabla6.setToolTipText("Seleccione alguna opcion dando click en la columna");
        tblTabla6.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jScrollPane3.setViewportView(tblTabla6);
        tblTabla6.getColumnModel().getColumn(0).setMaxWidth(40);
        tblTabla6.getColumnModel().getColumn(2).setMaxWidth(50);

        tblTabla3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Dispositivos GPS", "Costo"
            }
        ));
        tblTabla3.setToolTipText("Seleccione alguna opcion dando click en la columna");
        tblTabla3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jScrollPane4.setViewportView(tblTabla3);
        tblTabla3.getColumnModel().getColumn(0).setMaxWidth(60);
        tblTabla3.getColumnModel().getColumn(2).setMaxWidth(100);

        PanelPedido.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Pedido", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 3, 12))); // NOI18N

        jLabel1.setText("Producto:");

        btnSeleccionar.setText("Seleccionar");
        btnSeleccionar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSeleccionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSeleccionarActionPerformed(evt);
            }
        });

        tblPedido.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Pedido", "Cantidad", "Costo"
            }
        ));
        tblPedido.setToolTipText("Seleccione alguna opcion dando click en la columna");
        tblPedido.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jScrollPane8.setViewportView(tblPedido);
        tblPedido.getColumnModel().getColumn(0).setMaxWidth(60);
        tblPedido.getColumnModel().getColumn(2).setMaxWidth(100);
        tblPedido.getColumnModel().getColumn(3).setMaxWidth(100);

        jLabel2.setText("Cantidad:");

        cbxProductos.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "...", "Celulares, camaras y relojes", "Computadoras", "Dispositivos GPS", "Reproductores e instrumentos", "Televisores", "Videojuegos" }));
        cbxProductos.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        btnIngresar.setText("Ingresar");
        btnIngresar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnIngresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIngresarActionPerformed(evt);
            }
        });

        jLabel3.setText("ID:");

        jLabel4.setText("Costo:");

        jLabel5.setText("$");

        btnFinVenta.setText("Terminar venta");
        btnFinVenta.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnFinVenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFinVentaActionPerformed(evt);
            }
        });

        btnVentaNueva.setText("Nueva Venta");
        btnVentaNueva.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnVentaNueva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVentaNuevaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PanelPedidoLayout = new javax.swing.GroupLayout(PanelPedido);
        PanelPedido.setLayout(PanelPedidoLayout);
        PanelPedidoLayout.setHorizontalGroup(
            PanelPedidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelPedidoLayout.createSequentialGroup()
                .addGroup(PanelPedidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelPedidoLayout.createSequentialGroup()
                        .addGap(139, 139, 139)
                        .addComponent(btnFinVenta))
                    .addGroup(PanelPedidoLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(PanelPedidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
                            .addComponent(txtID, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGroup(PanelPedidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PanelPedidoLayout.createSequentialGroup()
                                .addGap(82, 82, 82)
                                .addComponent(jLabel1))
                            .addGroup(PanelPedidoLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(btnSeleccionar))
                            .addGroup(PanelPedidoLayout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(txtPedido, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PanelPedidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnIngresar)
                            .addGroup(PanelPedidoLayout.createSequentialGroup()
                                .addGroup(PanelPedidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(PanelPedidoLayout.createSequentialGroup()
                                        .addComponent(txtCosto, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel5))
                                    .addGroup(PanelPedidoLayout.createSequentialGroup()
                                        .addGap(12, 12, 12)
                                        .addComponent(jLabel4)))
                                .addGap(18, 18, 18)
                                .addGroup(PanelPedidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2)))))
                    .addGroup(PanelPedidoLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(cbxProductos, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelPedidoLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(PanelPedidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelPedidoLayout.createSequentialGroup()
                                .addComponent(btnVentaNueva)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))))
                .addContainerGap())
        );
        PanelPedidoLayout.setVerticalGroup(
            PanelPedidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelPedidoLayout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addComponent(btnVentaNueva)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbxProductos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(PanelPedidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(PanelPedidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPedido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCosto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(27, 27, 27)
                .addGroup(PanelPedidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSeleccionar)
                    .addComponent(btnIngresar))
                .addGap(26, 26, 26)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnFinVenta)
                .addGap(18, 18, 18))
        );

        tblTabla5.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Televisores", "Costo"
            }
        ));
        tblTabla5.setToolTipText("Seleccione alguna opcion dando click en la columna");
        tblTabla5.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jScrollPane7.setViewportView(tblTabla5);
        tblTabla5.getColumnModel().getColumn(0).setMaxWidth(40);
        tblTabla5.getColumnModel().getColumn(2).setMaxWidth(50);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 232, Short.MAX_VALUE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 232, Short.MAX_VALUE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(292, 292, 292)
                        .addComponent(lb_img, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(PanelPedido, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(47, 47, 47)
                .addComponent(lb_img, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(PanelPedido, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pnlPedido.addTab("Compra", jPanel1);

        jPanel2.setBackground(new java.awt.Color(204, 204, 255));

        Recibo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        Recibo.setLayout(null);

        jLabel6.setFont(new java.awt.Font("Arial", 3, 24)); // NOI18N
        jLabel6.setText("Programming Solutions");
        Recibo.add(jLabel6);
        jLabel6.setBounds(340, 20, 270, 30);

        jLabel7.setFont(new java.awt.Font("Arial", 3, 12)); // NOI18N
        jLabel7.setText("Trabajador:");
        Recibo.add(jLabel7);
        jLabel7.setBounds(80, 140, 70, 15);

        tblPedido2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Pedido", "Costo", "Cantidad", "Costo Total"
            }
        ));
        tblPedido2.setToolTipText("Seleccione alguna opcion dando click en la columna");
        jScrollPane10.setViewportView(tblPedido2);
        tblPedido2.getColumnModel().getColumn(0).setMaxWidth(60);
        tblPedido2.getColumnModel().getColumn(2).setMaxWidth(100);
        tblPedido2.getColumnModel().getColumn(3).setMaxWidth(100);
        tblPedido2.getColumnModel().getColumn(4).setMaxWidth(100);

        Recibo.add(jScrollPane10);
        jScrollPane10.setBounds(80, 170, 780, 180);

        jLabel8.setFont(new java.awt.Font("Arial", 3, 12)); // NOI18N
        jLabel8.setText("Direccion");
        Recibo.add(jLabel8);
        jLabel8.setBounds(370, 60, 240, 15);

        jLabel9.setFont(new java.awt.Font("Arial", 3, 11)); // NOI18N
        jLabel9.setText("Fecha:");
        Recibo.add(jLabel9);
        jLabel9.setBounds(430, 140, 40, 14);

        jLabel10.setFont(new java.awt.Font("Arial", 3, 12)); // NOI18N
        jLabel10.setText("Telefono:");
        Recibo.add(jLabel10);
        jLabel10.setBounds(710, 140, 60, 15);

        jLabel11.setFont(new java.awt.Font("Arial", 3, 12)); // NOI18N
        jLabel11.setText("Total:");
        Recibo.add(jLabel11);
        jLabel11.setBounds(740, 360, 32, 15);

        lblVendedor.setFont(new java.awt.Font("Arial", 3, 12)); // NOI18N
        Recibo.add(lblVendedor);
        lblVendedor.setBounds(170, 140, 90, 20);
        Recibo.add(lblFecha);
        lblFecha.setBounds(480, 140, 80, 20);

        jLabel12.setFont(new java.awt.Font("Arial", 3, 12)); // NOI18N
        jLabel12.setText("2-49-22-7");
        Recibo.add(jLabel12);
        jLabel12.setBounds(780, 140, 70, 15);
        Recibo.add(lblTotal);
        lblTotal.setBounds(780, 360, 50, 20);

        Logo2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Imagenes base/Logofa.png"))); // NOI18N
        Recibo.add(Logo2);
        Logo2.setBounds(170, 20, 160, 110);

        lblFolio.setFont(new java.awt.Font("Arial", 3, 14)); // NOI18N
        lblFolio.setText("1");
        Recibo.add(lblFolio);
        lblFolio.setBounds(820, 60, 50, 20);

        jLabel13.setFont(new java.awt.Font("Arial", 3, 14)); // NOI18N
        jLabel13.setText("Folio:");
        Recibo.add(jLabel13);
        jLabel13.setBounds(770, 60, 40, 17);

        Fondo2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Imagenes base/holaBlanca_1.png"))); // NOI18N
        Recibo.add(Fondo2);
        Fondo2.setBounds(20, 20, 920, 390);

        Fondo1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Imagenes base/lineas de color, ondas coloridas 166798.jpg"))); // NOI18N
        Fondo1.setText("F");
        Recibo.add(Fondo1);
        Fondo1.setBounds(0, 0, 960, 420);

        idBusqueda.setText("jLabel14");
        Recibo.add(idBusqueda);
        idBusqueda.setBounds(70, 370, 40, 14);

        txtImagen.setText("jTextField1");
        Recibo.add(txtImagen);
        txtImagen.setBounds(140, 370, 59, 20);

        btnImprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/print.png"))); // NOI18N
        btnImprimir.setText("Imprimir");
        btnImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(78, Short.MAX_VALUE)
                .addComponent(Recibo, javax.swing.GroupLayout.PREFERRED_SIZE, 959, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(71, 71, 71))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(514, 514, 514)
                .addComponent(btnImprimir)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(Recibo, javax.swing.GroupLayout.PREFERRED_SIZE, 422, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnImprimir)
                .addContainerGap(33, Short.MAX_VALUE))
        );

        pnlPedido.addTab("Cobrar Pedido", jPanel2);

        btnRegresar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/exit.png"))); // NOI18N
        btnRegresar.setText("Regresar");
        btnRegresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegresarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnRegresar)
                .addGap(510, 510, 510))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlPedido)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(pnlPedido)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnRegresar)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRegresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegresarActionPerformed
        // TODO add your handling code here:
        Login lo = new Login();
        lo.setVisible(true);
        dispose();
    }//GEN-LAST:event_btnRegresarActionPerformed

    private void btnSeleccionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSeleccionarActionPerformed
        // TODO add your handling code here:

        if (cbxProductos.getSelectedItem().equals("Celulares, camaras y relojes")) {
            int num = tblTabla1.getSelectedRow();
            String val = tblTabla1.getModel().getValueAt(num, 0).toString();
            int valN = Integer.parseInt(val);
            productoBebidas(valN);
        } else {
            if (cbxProductos.getSelectedItem().equals("Computadoras")) {
                int num2 = tblTabla2.getSelectedRow();
                String val2 = tblTabla2.getModel().getValueAt(num2, 0).toString();
                int valN2 = Integer.parseInt(val2);
                productoCafeC(valN2);
            } else {
                if (cbxProductos.getSelectedItem().equals("Dispositivos GPS")) {
                    int num3 = tblTabla3.getSelectedRow();
                    String val3 = tblTabla3.getModel().getValueAt(num3, 0).toString();
                    int valN3 = Integer.parseInt(val3);
                    productoCafeF(valN3);
                } else {
                    if (cbxProductos.getSelectedItem().equals("Reproductores e instrumentos")) {
                        int num4 = tblTabla4.getSelectedRow();
                        String val4 = tblTabla4.getModel().getValueAt(num4, 0).toString();
                        int valN4 = Integer.parseInt(val4);
                        productoComida(valN4);
                    } else {
                        if (cbxProductos.getSelectedItem().equals("Televisores")) {
                            int num5 = tblTabla5.getSelectedRow();
                            String val5 = tblTabla5.getModel().getValueAt(num5, 0).toString();
                            int valN5 = Integer.parseInt(val5);
                            productoDesayuno(valN5);
                        } else {
                            if (cbxProductos.getSelectedItem().equals("Videojuegos")) {
                                int num6 = tblTabla6.getSelectedRow();
                                String val6 = tblTabla6.getModel().getValueAt(num6, 0).toString();
                                int valN6 = Integer.parseInt(val6);
                                productoPostres(valN6);
                            } else {
                                JOptionPane.showMessageDialog(null, "Selecciona algun producto", "Error", JOptionPane.ERROR_MESSAGE);
                            }
                        }
                    }
                }
            }
        }

    }//GEN-LAST:event_btnSeleccionarActionPerformed

    private void btnIngresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIngresarActionPerformed
        // TODO add your handling code here:

        int i = Integer.parseInt(txtID.getText());
        ResultSet resultadoConsulta;

        if (txtID.getText().equals("") || txtPedido.getText().equals("") || txtCosto.getText().equals("") || txtCantidad.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Asegurece que los campos esten llenos", "Alerta", JOptionPane.WARNING_MESSAGE);
        } else {

            try {

                String a = txtID.getText();
                String b = txtPedido.getText();
                String c = txtCosto.getText();
                String d = txtCantidad.getText();
                int fol = Integer.parseInt(lblFolio.getText());
                String fila[] = new String[4];
                fila[0] = a;
                fila[1] = b;
                fila[2] = c;
                fila[3] = d;
                datos.addRow(fila);
                tblPedido.setModel(datos);

                int costo = Integer.parseInt(c);
                int cantidad = Integer.parseInt(d);
                String e = String.valueOf(costo * cantidad);

                String fila2[] = new String[5];
                fila2[0] = a;
                fila2[1] = b;
                fila2[2] = c;
                fila2[3] = d;
                fila2[4] = e;

                datos2.addRow(fila2);
                tblPedido.setModel(datos2);

                PreparedStatement pst = conectar.prepareStatement("INSERT INTO venta(folio,producto,cantidad,costo,costoTotal) VALUES (?,?,?,?,?)");
                pst.setInt(1, fol);
                pst.setString(2, b);
                pst.setString(3, d);
                pst.setDouble(4, costo);
                pst.setDouble(5, cantidad * costo);
                pst.executeUpdate();

                String consulta = "SELECT codigo FROM venta WHERE producto='" + txtPedido.getText() + "' AND folio='" + lblFolio.getText() + "';";

                Statement sentencia = conectar.createStatement();
                resultadoConsulta = sentencia.executeQuery(consulta);
                while (resultadoConsulta.next()) {
                    idBusqueda.setText(resultadoConsulta.getString(1));
                }

                int la = Integer.parseInt(idBusqueda.getText());

                PreparedStatement pst2 = conectar.prepareStatement("INSERT INTO productos_has_venta(Productos_codigo,Venta_codigo) VALUES (?,?)");
                pst2.setInt(1, i);
                pst2.setInt(2, la);
                pst2.executeUpdate();

                JOptionPane.showMessageDialog(null, "Datos agregados");
            } catch (Exception e) {
            }

            listaVenta();
            txtCantidad.setText("");
            txtCosto.setText("");
            txtID.setText("");
            txtPedido.setText("");
        }

        try {
        } catch (Exception e) {
        }
    }//GEN-LAST:event_btnIngresarActionPerformed

    private void btnFinVentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFinVentaActionPerformed
        // TODO add your handling code here:
        cbxProductos.setEnabled(false);
        cbxProductos.setSelectedItem("...");
        txtID.setEnabled(false);
        txtPedido.setEnabled(false);
        txtCosto.setEnabled(false);
        txtCantidad.setEnabled(false);
        btnIngresar.setEnabled(false);
        btnSeleccionar.setEnabled(false);
        btnFinVenta.setEnabled(false);
        btnVentaNueva.setEnabled(true);
        lblTotal.setText("");
        
        for (int i = datos.getRowCount() - 1; i >= 0; i--) {
            datos.removeRow(i);
        }
        tblPedido.setModel(datos);
        
        for (int i = datos2.getRowCount() - 1; i >= 0; i--) {
            datos2.removeRow(i);
        }
        tblPedido2.setModel(datos2);
        
        
        JOptionPane.showMessageDialog(null, "Venta finalizada", "Close", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnFinVentaActionPerformed

    private void btnImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimirActionPerformed
        // TODO add your handling code here:
        try {
            PrinterJob gap = PrinterJob.getPrinterJob();
            gap.setPrintable(this);
            boolean top = gap.printDialog();
            if (top) {
                gap.print();
            }

        } catch (PrinterException e) {
            JOptionPane.showMessageDialog(null, "Error de programa", "Error" + e, JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_btnImprimirActionPerformed

    private void btnVentaNuevaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVentaNuevaActionPerformed
        // TODO add your handling code here:
        btnVentaNueva.setEnabled(false);
        cbxProductos.setEnabled(true);
        txtID.setEnabled(true);
        txtPedido.setEnabled(true);
        txtCosto.setEnabled(true);
        txtCantidad.setEnabled(true);
        btnFinVenta.setEnabled(true);
        btnIngresar.setEnabled(true);
        btnSeleccionar.setEnabled(true);

        try {
            //ConectaDB c = new ConectaDB();
            ResultSet resultadoProductos;

            String consulta = "SELECT MAX(folio) FROM nfolio ";
            Statement sentencia = conectar.createStatement();
            resultadoProductos = sentencia.executeQuery(consulta);

            while (resultadoProductos.next()) {
                lblFolio.setText(resultadoProductos.getString(1));
            }

        } catch (Exception e) {
            System.out.println("No consulta productos");
        }

        int fo = Integer.parseInt(lblFolio.getText());
        try {
            PreparedStatement pst = conectar.prepareStatement("INSERT INTO nfolio(folio) VALUES (?)");
            pst.setInt(1, fo + 1);
            pst.executeUpdate();

        } catch (Exception e) {
            System.out.print(e.getMessage());
        }




    }//GEN-LAST:event_btnVentaNuevaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Menu().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Fondo1;
    private javax.swing.JLabel Fondo2;
    private javax.swing.JLabel Logo2;
    private javax.swing.JPanel PanelPedido;
    private javax.swing.JPanel Recibo;
    private javax.swing.JButton btnFinVenta;
    private javax.swing.JButton btnImprimir;
    private javax.swing.JButton btnIngresar;
    private javax.swing.JButton btnRegresar;
    private javax.swing.JButton btnSeleccionar;
    private javax.swing.JButton btnVentaNueva;
    private javax.swing.JComboBox cbxProductos;
    private javax.swing.JLabel idBusqueda;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JTable jTable5;
    private javax.swing.JLabel lb_img;
    private javax.swing.JLabel lblFecha;
    private javax.swing.JLabel lblFolio;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JLabel lblVendedor;
    private javax.swing.JTabbedPane pnlPedido;
    private javax.swing.JTable tblPedido;
    private javax.swing.JTable tblPedido2;
    private javax.swing.JTable tblTabla1;
    private javax.swing.JTable tblTabla2;
    private javax.swing.JTable tblTabla3;
    private javax.swing.JTable tblTabla4;
    private javax.swing.JTable tblTabla5;
    private javax.swing.JTable tblTabla6;
    private javax.swing.JTextField txtCantidad;
    private javax.swing.JTextField txtCosto;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtImagen;
    private javax.swing.JTextField txtPedido;
    // End of variables declaration//GEN-END:variables

//Llenado de las tablas *********************************************************************
    public void listaDesayuno() {
        String ccr = "Celulares, camaras y relojes";
        try {
            //ConectaDB c = new ConectaDB();
            ResultSet resultadoProductos;
            ResultSetMetaData datosConsulta;

            String consulta = "SELECT codigo, articulo, precio FROM productos WHERE Categoria='" + ccr + "';";
            Statement sentencia = conectar.createStatement();
            resultadoProductos = sentencia.executeQuery(consulta);

            datosConsulta = resultadoProductos.getMetaData();
            Object[] filasConsulta = new Object[datosConsulta.getColumnCount()];
            valoresTabla = (DefaultTableModel) tblTabla1.getModel();

            while (resultadoProductos.next()) {
                for (int i = 0; i < filasConsulta.length; i++) {
                    filasConsulta[i] = resultadoProductos.getObject(i + 1);
                }
                valoresTabla.addRow(filasConsulta);
            }
            tblTabla1.setModel(valoresTabla);
        } catch (Exception e) {
            System.out.println("No consulta productos");
        }
    }

    public void listaComida() {
        String comp = "Computadoras";
        try {
            //ConectaDB c = new ConectaDB();
            ResultSet resultadoProductos;
            ResultSetMetaData datosConsulta;

            String consulta = "SELECT codigo, articulo, precio FROM productos WHERE Categoria='" + comp + "';";
            Statement sentencia = conectar.createStatement();
            resultadoProductos = sentencia.executeQuery(consulta);

            datosConsulta = resultadoProductos.getMetaData();
            Object[] filasConsulta = new Object[datosConsulta.getColumnCount()];
            valoresTabla = (DefaultTableModel) tblTabla2.getModel();

            while (resultadoProductos.next()) {
                for (int i = 0; i < filasConsulta.length; i++) {
                    filasConsulta[i] = resultadoProductos.getObject(i + 1);
                }
                valoresTabla.addRow(filasConsulta);
            }
            tblTabla2.setModel(valoresTabla);
        } catch (Exception e) {
            System.out.println("No consulta productos");
        }
    }

    public void listaCafeC() {
        String gps = "Dispositivos GPS";
        try {
            //ConectaDB c = new ConectaDB();
            ResultSet resultadoProductos;
            ResultSetMetaData datosConsulta;

            String consulta = "SELECT codigo, articulo, precio FROM productos WHERE Categoria='" + gps + "';";
            Statement sentencia = conectar.createStatement();
            resultadoProductos = sentencia.executeQuery(consulta);

            datosConsulta = resultadoProductos.getMetaData();
            Object[] filasConsulta = new Object[datosConsulta.getColumnCount()];
            valoresTabla = (DefaultTableModel) tblTabla3.getModel();

            while (resultadoProductos.next()) {
                for (int i = 0; i < filasConsulta.length; i++) {
                    filasConsulta[i] = resultadoProductos.getObject(i + 1);
                }
                valoresTabla.addRow(filasConsulta);
            }
            tblTabla3.setModel(valoresTabla);
        } catch (Exception e) {
            System.out.println("No consulta productos");
        }
    }

    public void listaCafeF() {
        String ri = "Reproductores e instrumentos";
        try {
            //ConectaDB c = new ConectaDB();
            ResultSet resultadoProductos;
            ResultSetMetaData datosConsulta;

            String consulta = "SELECT codigo, articulo, precio FROM productos WHERE Categoria='" + ri + "';";
            Statement sentencia = conectar.createStatement();
            resultadoProductos = sentencia.executeQuery(consulta);

            datosConsulta = resultadoProductos.getMetaData();
            Object[] filasConsulta = new Object[datosConsulta.getColumnCount()];
            valoresTabla = (DefaultTableModel) tblTabla4.getModel();

            while (resultadoProductos.next()) {
                for (int i = 0; i < filasConsulta.length; i++) {
                    filasConsulta[i] = resultadoProductos.getObject(i + 1);
                }
                valoresTabla.addRow(filasConsulta);
            }
            tblTabla4.setModel(valoresTabla);
        } catch (Exception e) {
            System.out.println("No consulta productos");
        }
    }

    public void listaBebidas() {
        String tel = "Televisores";
        try {
            //ConectaDB c = new ConectaDB();
            ResultSet resultadoProductos;
            ResultSetMetaData datosConsulta;

            String consulta = "SELECT codigo, articulo, precio FROM productos WHERE Categoria='" + tel + "';";
            Statement sentencia = conectar.createStatement();
            resultadoProductos = sentencia.executeQuery(consulta);

            datosConsulta = resultadoProductos.getMetaData();
            Object[] filasConsulta = new Object[datosConsulta.getColumnCount()];
            valoresTabla = (DefaultTableModel) tblTabla5.getModel();

            while (resultadoProductos.next()) {
                for (int i = 0; i < filasConsulta.length; i++) {
                    filasConsulta[i] = resultadoProductos.getObject(i + 1);
                }
                valoresTabla.addRow(filasConsulta);
            }
            tblTabla5.setModel(valoresTabla);
        } catch (Exception e) {
            System.out.println("No consulta productos");
        }
    }

    public void listaPostre() {
        String vj = "Videojuegos";
        try {
            //ConectaDB c = new ConectaDB();
            ResultSet resultadoProductos;
            ResultSetMetaData datosConsulta;

            String consulta = "SELECT codigo, articulo, precio FROM productos WHERE Categoria='" + vj + "';";
            Statement sentencia = conectar.createStatement();
            resultadoProductos = sentencia.executeQuery(consulta);

            datosConsulta = resultadoProductos.getMetaData();
            Object[] filasConsulta = new Object[datosConsulta.getColumnCount()];
            valoresTabla = (DefaultTableModel) tblTabla6.getModel();

            while (resultadoProductos.next()) {
                for (int i = 0; i < filasConsulta.length; i++) {
                    filasConsulta[i] = resultadoProductos.getObject(i + 1);
                }
                valoresTabla.addRow(filasConsulta);
            }
            tblTabla6.setModel(valoresTabla);
        } catch (Exception e) {
            System.out.println("No consulta productos");
        }
    }

    //************************************************************************************
    //Metodos para seleccionar producto
    public void productoDesayuno(int idProducto) {
        try {
            //ConectaDB c = new ConectaDB();
            ResultSet resultadoSeleccionado;
            String pathImg = "";
            String consulta = "SELECT codigo, articulo, precio, imagen FROM productos WHERE codigo='" + idProducto + "';";
            Statement sentencia = conectar.createStatement();
            resultadoSeleccionado = sentencia.executeQuery(consulta);

            while (resultadoSeleccionado.next()) {
                txtID.setText(resultadoSeleccionado.getString(1));
                txtPedido.setText(resultadoSeleccionado.getString(2));
                txtCosto.setText(resultadoSeleccionado.getString(3));
                
                pathImg = resultadoSeleccionado.getString(4);
                txtImagen.setText(pathImg);
                System.out.println(pathImg);

                lb_img.setIcon(new ImageIcon(getClass().getResource(txtImagen.getText())));
            }

        } catch (Exception e) {
            System.out.println("No selecciona producto");
        }
    }

    public void productoComida(int idProducto) {
        try {
            //ConectaDB c = new ConectaDB();
            ResultSet resultadoSeleccionado;
            String pathImg = "";
            String consulta = "SELECT codigo, articulo, precio, imagen FROM productos WHERE codigo='" + idProducto + "';";
            Statement sentencia = conectar.createStatement();
            resultadoSeleccionado = sentencia.executeQuery(consulta);

            while (resultadoSeleccionado.next()) {
                txtID.setText(resultadoSeleccionado.getString(1));
                txtPedido.setText(resultadoSeleccionado.getString(2));
                txtCosto.setText(resultadoSeleccionado.getString(3));
                
                pathImg = resultadoSeleccionado.getString(4);
                txtImagen.setText(pathImg);
                System.out.println(pathImg);

                lb_img.setIcon(new ImageIcon(getClass().getResource(txtImagen.getText())));
            }

        } catch (Exception e) {
            System.out.println("No selecciona producto");
        }
    }

    public void productoCafeC(int idProducto) {
        try {
            //ConectaDB c = new ConectaDB();
            ResultSet resultadoSeleccionado;
            String pathImg = "";
            String consulta = "SELECT codigo, articulo, precio, imagen FROM productos WHERE codigo='" + idProducto + "';";
            Statement sentencia = conectar.createStatement();
            resultadoSeleccionado = sentencia.executeQuery(consulta);

            while (resultadoSeleccionado.next()) {
                txtID.setText(resultadoSeleccionado.getString(1));
                txtPedido.setText(resultadoSeleccionado.getString(2));
                txtCosto.setText(resultadoSeleccionado.getString(3));
                
                pathImg = resultadoSeleccionado.getString(4);
                txtImagen.setText(pathImg);
                System.out.println(pathImg);

                lb_img.setIcon(new ImageIcon(getClass().getResource(txtImagen.getText())));
            }

        } catch (Exception e) {
            System.out.println("No selecciona producto");
        }
    }

    public void productoCafeF(int idProducto) {
        try {
            //ConectaDB c = new ConectaDB();
            ResultSet resultadoSeleccionado;
            String pathImg = "";
            String consulta = "SELECT codigo, articulo, precio, imagen FROM productos WHERE codigo='" + idProducto + "';";
            Statement sentencia = conectar.createStatement();
            resultadoSeleccionado = sentencia.executeQuery(consulta);

            while (resultadoSeleccionado.next()) {
                txtID.setText(resultadoSeleccionado.getString(1));
                txtPedido.setText(resultadoSeleccionado.getString(2));
                txtCosto.setText(resultadoSeleccionado.getString(3));
                
                pathImg = resultadoSeleccionado.getString(4);
                txtImagen.setText(pathImg);
                System.out.println(pathImg);

                lb_img.setIcon(new ImageIcon(getClass().getResource(txtImagen.getText())));
            }

        } catch (Exception e) {
            System.out.println("No selecciona producto");
        }
    }

    public void productoBebidas(int idProducto) {
        try {
            //ConectaDB c = new ConectaDB();
            ResultSet resultadoSeleccionado;
            String pathImg = "";
            String consulta = "SELECT codigo, articulo, precio, imagen FROM productos WHERE codigo='" + idProducto + "';";
            Statement sentencia = conectar.createStatement();
            resultadoSeleccionado = sentencia.executeQuery(consulta);

            while (resultadoSeleccionado.next()) {
                txtID.setText(resultadoSeleccionado.getString(1));
                txtPedido.setText(resultadoSeleccionado.getString(2));
                txtCosto.setText(resultadoSeleccionado.getString(3));
                
                pathImg = resultadoSeleccionado.getString(4);
                txtImagen.setText(pathImg);
                System.out.println(pathImg);

                lb_img.setIcon(new ImageIcon(getClass().getResource(txtImagen.getText())));
            }

        } catch (Exception e) {
            System.out.println("No selecciona producto");
        }
    }

    public void productoPostres(int idProducto) {
        try {
            //ConectaDB c = new ConectaDB();
            ResultSet resultadoSeleccionado;
            String pathImg = "";
            String consulta = "SELECT codigo, articulo, precio, imagen FROM productos WHERE codigo='" + idProducto + "';";
            Statement sentencia = conectar.createStatement();
            resultadoSeleccionado = sentencia.executeQuery(consulta);

            while (resultadoSeleccionado.next()) {
                txtID.setText(resultadoSeleccionado.getString(1));
                txtPedido.setText(resultadoSeleccionado.getString(2));
                txtCosto.setText(resultadoSeleccionado.getString(3));
                
                pathImg = resultadoSeleccionado.getString(4);
                txtImagen.setText(pathImg);
                System.out.println(pathImg);

                lb_img.setIcon(new ImageIcon(getClass().getResource(txtImagen.getText())));
            }

        } catch (Exception e) {
            System.out.println("No selecciona producto");
        }
    }
    //*************************************************************************

    @Override
    public int print(Graphics graf, PageFormat pagfor, int index) throws PrinterException {

        if (index > 0) {
            return NO_SUCH_PAGE;
        }
        Graphics2D hub = (Graphics2D) graf;
        hub.translate(pagfor.getImageableX() + 17, pagfor.getImageableY() + 80);// linea de codigo para que la impresion no quede totalmente esquinado
        hub.scale(0.6, 0.7);//tamaño de la impresion

        Recibo.printAll(graf);//Lo que se va a imprimir
        return PAGE_EXISTS;
    }

//________________________________________________________________________________________________________________________
    public void listaVenta() {
        String folio = lblFolio.getText();
        System.out.println(folio);
        try {
            //ConectaDB c = new ConectaDB();
            ResultSet resultadoProductos;
            ResultSetMetaData datosConsulta;

            String consulta = "SELECT SUM(costoTotal) FROM venta WHERE folio='" + folio + "';";
            Statement sentencia = conectar.createStatement();
            resultadoProductos = sentencia.executeQuery(consulta);

            while (resultadoProductos.next()) {
                lblTotal.setText(resultadoProductos.getString(1));
            }

        } catch (Exception e) {
            System.out.println("No consulta productos");
        }
    }
}